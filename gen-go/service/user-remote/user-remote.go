// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"service"
)

var _ = service.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void login(string address, string conn_id,  params)")
  fmt.Fprintln(os.Stderr, "  void ping(string address, string conn_id,  context)")
  fmt.Fprintln(os.Stderr, "  void disconnect(string address, string conn_id,  context)")
  fmt.Fprintln(os.Stderr, "  void recv_binary(string address, string conn_id,  context, string message)")
  fmt.Fprintln(os.Stderr, "  void recv_text(string address, string conn_id,  context, string message)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := service.NewUserClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "login":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Login requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg74 := flag.Arg(3)
    mbTrans75 := thrift.NewTMemoryBufferLen(len(arg74))
    defer mbTrans75.Close()
    _, err76 := mbTrans75.WriteString(arg74)
    if err76 != nil { 
      Usage()
      return
    }
    factory77 := thrift.NewTJSONProtocolFactory()
    jsProt78 := factory77.GetProtocol(mbTrans75)
    containerStruct2 := service.NewUserLoginArgs()
    err79 := containerStruct2.ReadField3(jsProt78)
    if err79 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Params
    value2 := argvalue2
    fmt.Print(client.Login(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "ping":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Ping requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg82 := flag.Arg(3)
    mbTrans83 := thrift.NewTMemoryBufferLen(len(arg82))
    defer mbTrans83.Close()
    _, err84 := mbTrans83.WriteString(arg82)
    if err84 != nil { 
      Usage()
      return
    }
    factory85 := thrift.NewTJSONProtocolFactory()
    jsProt86 := factory85.GetProtocol(mbTrans83)
    containerStruct2 := service.NewUserPingArgs()
    err87 := containerStruct2.ReadField3(jsProt86)
    if err87 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Context
    value2 := argvalue2
    fmt.Print(client.Ping(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "disconnect":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Disconnect requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg90 := flag.Arg(3)
    mbTrans91 := thrift.NewTMemoryBufferLen(len(arg90))
    defer mbTrans91.Close()
    _, err92 := mbTrans91.WriteString(arg90)
    if err92 != nil { 
      Usage()
      return
    }
    factory93 := thrift.NewTJSONProtocolFactory()
    jsProt94 := factory93.GetProtocol(mbTrans91)
    containerStruct2 := service.NewUserDisconnectArgs()
    err95 := containerStruct2.ReadField3(jsProt94)
    if err95 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Context
    value2 := argvalue2
    fmt.Print(client.Disconnect(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "recv_binary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RecvBinary requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg98 := flag.Arg(3)
    mbTrans99 := thrift.NewTMemoryBufferLen(len(arg98))
    defer mbTrans99.Close()
    _, err100 := mbTrans99.WriteString(arg98)
    if err100 != nil { 
      Usage()
      return
    }
    factory101 := thrift.NewTJSONProtocolFactory()
    jsProt102 := factory101.GetProtocol(mbTrans99)
    containerStruct2 := service.NewUserRecvBinaryArgs()
    err103 := containerStruct2.ReadField3(jsProt102)
    if err103 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Context
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.RecvBinary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "recv_text":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RecvText requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg107 := flag.Arg(3)
    mbTrans108 := thrift.NewTMemoryBufferLen(len(arg107))
    defer mbTrans108.Close()
    _, err109 := mbTrans108.WriteString(arg107)
    if err109 != nil { 
      Usage()
      return
    }
    factory110 := thrift.NewTJSONProtocolFactory()
    jsProt111 := factory110.GetProtocol(mbTrans108)
    containerStruct2 := service.NewUserRecvTextArgs()
    err112 := containerStruct2.ReadField3(jsProt111)
    if err112 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Context
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.RecvText(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
