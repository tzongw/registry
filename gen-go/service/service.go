// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Gate interface {
  // Parameters:
  //  - ConnID
  //  - Context
  SetContext(ctx context.Context, conn_id string, context map[string]string) (err error)
  // Parameters:
  //  - ConnID
  //  - Context
  UnsetContext(ctx context.Context, conn_id string, context []string) (err error)
  // Parameters:
  //  - ConnID
  RemoveConn(ctx context.Context, conn_id string) (err error)
  // Parameters:
  //  - ConnID
  //  - Message
  SendText(ctx context.Context, conn_id string, message string) (err error)
  // Parameters:
  //  - ConnID
  //  - Message
  SendBinary(ctx context.Context, conn_id string, message []byte) (err error)
  // Parameters:
  //  - ConnID
  //  - Group
  JoinGroup(ctx context.Context, conn_id string, group string) (err error)
  // Parameters:
  //  - ConnID
  //  - Group
  LeaveGroup(ctx context.Context, conn_id string, group string) (err error)
  // Parameters:
  //  - Group
  //  - Exclude
  //  - Message
  BroadcastBinary(ctx context.Context, group string, exclude []string, message []byte) (err error)
  // Parameters:
  //  - Group
  //  - Exclude
  //  - Message
  BroadcastText(ctx context.Context, group string, exclude []string, message string) (err error)
}

type GateClient struct {
  c thrift.TClient
}

func NewGateClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GateClient {
  return &GateClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewGateClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GateClient {
  return &GateClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewGateClient(c thrift.TClient) *GateClient {
  return &GateClient{
    c: c,
  }
}

func (p *GateClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ConnID
//  - Context
func (p *GateClient) SetContext(ctx context.Context, conn_id string, context map[string]string) (err error) {
  var _args0 GateSetContextArgs
  _args0.ConnID = conn_id
  _args0.Context = context
  if err := p.Client_().Call(ctx, "set_context", &_args0, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - ConnID
//  - Context
func (p *GateClient) UnsetContext(ctx context.Context, conn_id string, context []string) (err error) {
  var _args1 GateUnsetContextArgs
  _args1.ConnID = conn_id
  _args1.Context = context
  if err := p.Client_().Call(ctx, "unset_context", &_args1, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - ConnID
func (p *GateClient) RemoveConn(ctx context.Context, conn_id string) (err error) {
  var _args2 GateRemoveConnArgs
  _args2.ConnID = conn_id
  if err := p.Client_().Call(ctx, "remove_conn", &_args2, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - ConnID
//  - Message
func (p *GateClient) SendText(ctx context.Context, conn_id string, message string) (err error) {
  var _args3 GateSendTextArgs
  _args3.ConnID = conn_id
  _args3.Message = message
  if err := p.Client_().Call(ctx, "send_text", &_args3, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - ConnID
//  - Message
func (p *GateClient) SendBinary(ctx context.Context, conn_id string, message []byte) (err error) {
  var _args4 GateSendBinaryArgs
  _args4.ConnID = conn_id
  _args4.Message = message
  if err := p.Client_().Call(ctx, "send_binary", &_args4, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - ConnID
//  - Group
func (p *GateClient) JoinGroup(ctx context.Context, conn_id string, group string) (err error) {
  var _args5 GateJoinGroupArgs
  _args5.ConnID = conn_id
  _args5.Group = group
  if err := p.Client_().Call(ctx, "join_group", &_args5, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - ConnID
//  - Group
func (p *GateClient) LeaveGroup(ctx context.Context, conn_id string, group string) (err error) {
  var _args6 GateLeaveGroupArgs
  _args6.ConnID = conn_id
  _args6.Group = group
  if err := p.Client_().Call(ctx, "leave_group", &_args6, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Group
//  - Exclude
//  - Message
func (p *GateClient) BroadcastBinary(ctx context.Context, group string, exclude []string, message []byte) (err error) {
  var _args7 GateBroadcastBinaryArgs
  _args7.Group = group
  _args7.Exclude = exclude
  _args7.Message = message
  if err := p.Client_().Call(ctx, "broadcast_binary", &_args7, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Group
//  - Exclude
//  - Message
func (p *GateClient) BroadcastText(ctx context.Context, group string, exclude []string, message string) (err error) {
  var _args8 GateBroadcastTextArgs
  _args8.Group = group
  _args8.Exclude = exclude
  _args8.Message = message
  if err := p.Client_().Call(ctx, "broadcast_text", &_args8, nil); err != nil {
    return err
  }
  return nil
}

type GateProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Gate
}

func (p *GateProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *GateProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *GateProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewGateProcessor(handler Gate) *GateProcessor {

  self9 := &GateProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self9.processorMap["set_context"] = &gateProcessorSetContext{handler:handler}
  self9.processorMap["unset_context"] = &gateProcessorUnsetContext{handler:handler}
  self9.processorMap["remove_conn"] = &gateProcessorRemoveConn{handler:handler}
  self9.processorMap["send_text"] = &gateProcessorSendText{handler:handler}
  self9.processorMap["send_binary"] = &gateProcessorSendBinary{handler:handler}
  self9.processorMap["join_group"] = &gateProcessorJoinGroup{handler:handler}
  self9.processorMap["leave_group"] = &gateProcessorLeaveGroup{handler:handler}
  self9.processorMap["broadcast_binary"] = &gateProcessorBroadcastBinary{handler:handler}
  self9.processorMap["broadcast_text"] = &gateProcessorBroadcastText{handler:handler}
return self9
}

func (p *GateProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x10 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x10.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x10

}

type gateProcessorSetContext struct {
  handler Gate
}

func (p *gateProcessorSetContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GateSetContextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.SetContext(ctx, args.ConnID, args.Context); err2 != nil {
    return true, err2
  }
  return true, nil
}

type gateProcessorUnsetContext struct {
  handler Gate
}

func (p *gateProcessorUnsetContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GateUnsetContextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.UnsetContext(ctx, args.ConnID, args.Context); err2 != nil {
    return true, err2
  }
  return true, nil
}

type gateProcessorRemoveConn struct {
  handler Gate
}

func (p *gateProcessorRemoveConn) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GateRemoveConnArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.RemoveConn(ctx, args.ConnID); err2 != nil {
    return true, err2
  }
  return true, nil
}

type gateProcessorSendText struct {
  handler Gate
}

func (p *gateProcessorSendText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GateSendTextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.SendText(ctx, args.ConnID, args.Message); err2 != nil {
    return true, err2
  }
  return true, nil
}

type gateProcessorSendBinary struct {
  handler Gate
}

func (p *gateProcessorSendBinary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GateSendBinaryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.SendBinary(ctx, args.ConnID, args.Message); err2 != nil {
    return true, err2
  }
  return true, nil
}

type gateProcessorJoinGroup struct {
  handler Gate
}

func (p *gateProcessorJoinGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GateJoinGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.JoinGroup(ctx, args.ConnID, args.Group); err2 != nil {
    return true, err2
  }
  return true, nil
}

type gateProcessorLeaveGroup struct {
  handler Gate
}

func (p *gateProcessorLeaveGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GateLeaveGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.LeaveGroup(ctx, args.ConnID, args.Group); err2 != nil {
    return true, err2
  }
  return true, nil
}

type gateProcessorBroadcastBinary struct {
  handler Gate
}

func (p *gateProcessorBroadcastBinary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GateBroadcastBinaryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.BroadcastBinary(ctx, args.Group, args.Exclude, args.Message); err2 != nil {
    return true, err2
  }
  return true, nil
}

type gateProcessorBroadcastText struct {
  handler Gate
}

func (p *gateProcessorBroadcastText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GateBroadcastTextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.BroadcastText(ctx, args.Group, args.Exclude, args.Message); err2 != nil {
    return true, err2
  }
  return true, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ConnID
//  - Context
type GateSetContextArgs struct {
  ConnID string `thrift:"conn_id,1" db:"conn_id" json:"conn_id"`
  Context map[string]string `thrift:"context,2" db:"context" json:"context"`
}

func NewGateSetContextArgs() *GateSetContextArgs {
  return &GateSetContextArgs{}
}


func (p *GateSetContextArgs) GetConnID() string {
  return p.ConnID
}

func (p *GateSetContextArgs) GetContext() map[string]string {
  return p.Context
}
func (p *GateSetContextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GateSetContextArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *GateSetContextArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.Context[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GateSetContextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GateSetContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conn_id: ", p), err) }
  return err
}

func (p *GateSetContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:context: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Context {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:context: ", p), err) }
  return err
}

func (p *GateSetContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GateSetContextArgs(%+v)", *p)
}

// Attributes:
//  - ConnID
//  - Context
type GateUnsetContextArgs struct {
  ConnID string `thrift:"conn_id,1" db:"conn_id" json:"conn_id"`
  Context []string `thrift:"context,2" db:"context" json:"context"`
}

func NewGateUnsetContextArgs() *GateUnsetContextArgs {
  return &GateUnsetContextArgs{}
}


func (p *GateUnsetContextArgs) GetConnID() string {
  return p.ConnID
}

func (p *GateUnsetContextArgs) GetContext() []string {
  return p.Context
}
func (p *GateUnsetContextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GateUnsetContextArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *GateUnsetContextArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Context =  tSet
  for i := 0; i < size; i ++ {
var _elem13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.Context = append(p.Context, _elem13)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GateUnsetContextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unset_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GateUnsetContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conn_id: ", p), err) }
  return err
}

func (p *GateUnsetContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:context: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Context)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Context); i++ {
    for j := i+1; j<len(p.Context); j++ {
      if reflect.DeepEqual(p.Context[i],p.Context[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Context[i]))
      }
    }
  }
  for _, v := range p.Context {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:context: ", p), err) }
  return err
}

func (p *GateUnsetContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GateUnsetContextArgs(%+v)", *p)
}

// Attributes:
//  - ConnID
type GateRemoveConnArgs struct {
  ConnID string `thrift:"conn_id,1" db:"conn_id" json:"conn_id"`
}

func NewGateRemoveConnArgs() *GateRemoveConnArgs {
  return &GateRemoveConnArgs{}
}


func (p *GateRemoveConnArgs) GetConnID() string {
  return p.ConnID
}
func (p *GateRemoveConnArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GateRemoveConnArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *GateRemoveConnArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("remove_conn_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GateRemoveConnArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conn_id: ", p), err) }
  return err
}

func (p *GateRemoveConnArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GateRemoveConnArgs(%+v)", *p)
}

// Attributes:
//  - ConnID
//  - Message
type GateSendTextArgs struct {
  ConnID string `thrift:"conn_id,1" db:"conn_id" json:"conn_id"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewGateSendTextArgs() *GateSendTextArgs {
  return &GateSendTextArgs{}
}


func (p *GateSendTextArgs) GetConnID() string {
  return p.ConnID
}

func (p *GateSendTextArgs) GetMessage() string {
  return p.Message
}
func (p *GateSendTextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GateSendTextArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *GateSendTextArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *GateSendTextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_text_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GateSendTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conn_id: ", p), err) }
  return err
}

func (p *GateSendTextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *GateSendTextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GateSendTextArgs(%+v)", *p)
}

// Attributes:
//  - ConnID
//  - Message
type GateSendBinaryArgs struct {
  ConnID string `thrift:"conn_id,1" db:"conn_id" json:"conn_id"`
  Message []byte `thrift:"message,2" db:"message" json:"message"`
}

func NewGateSendBinaryArgs() *GateSendBinaryArgs {
  return &GateSendBinaryArgs{}
}


func (p *GateSendBinaryArgs) GetConnID() string {
  return p.ConnID
}

func (p *GateSendBinaryArgs) GetMessage() []byte {
  return p.Message
}
func (p *GateSendBinaryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GateSendBinaryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *GateSendBinaryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *GateSendBinaryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_binary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GateSendBinaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conn_id: ", p), err) }
  return err
}

func (p *GateSendBinaryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteBinary(p.Message); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *GateSendBinaryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GateSendBinaryArgs(%+v)", *p)
}

// Attributes:
//  - ConnID
//  - Group
type GateJoinGroupArgs struct {
  ConnID string `thrift:"conn_id,1" db:"conn_id" json:"conn_id"`
  Group string `thrift:"group,2" db:"group" json:"group"`
}

func NewGateJoinGroupArgs() *GateJoinGroupArgs {
  return &GateJoinGroupArgs{}
}


func (p *GateJoinGroupArgs) GetConnID() string {
  return p.ConnID
}

func (p *GateJoinGroupArgs) GetGroup() string {
  return p.Group
}
func (p *GateJoinGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GateJoinGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *GateJoinGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Group = v
}
  return nil
}

func (p *GateJoinGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("join_group_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GateJoinGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conn_id: ", p), err) }
  return err
}

func (p *GateJoinGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err) }
  if err := oprot.WriteString(string(p.Group)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err) }
  return err
}

func (p *GateJoinGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GateJoinGroupArgs(%+v)", *p)
}

// Attributes:
//  - ConnID
//  - Group
type GateLeaveGroupArgs struct {
  ConnID string `thrift:"conn_id,1" db:"conn_id" json:"conn_id"`
  Group string `thrift:"group,2" db:"group" json:"group"`
}

func NewGateLeaveGroupArgs() *GateLeaveGroupArgs {
  return &GateLeaveGroupArgs{}
}


func (p *GateLeaveGroupArgs) GetConnID() string {
  return p.ConnID
}

func (p *GateLeaveGroupArgs) GetGroup() string {
  return p.Group
}
func (p *GateLeaveGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GateLeaveGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *GateLeaveGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Group = v
}
  return nil
}

func (p *GateLeaveGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("leave_group_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GateLeaveGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conn_id: ", p), err) }
  return err
}

func (p *GateLeaveGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err) }
  if err := oprot.WriteString(string(p.Group)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err) }
  return err
}

func (p *GateLeaveGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GateLeaveGroupArgs(%+v)", *p)
}

// Attributes:
//  - Group
//  - Exclude
//  - Message
type GateBroadcastBinaryArgs struct {
  Group string `thrift:"group,1" db:"group" json:"group"`
  Exclude []string `thrift:"exclude,2" db:"exclude" json:"exclude"`
  Message []byte `thrift:"message,3" db:"message" json:"message"`
}

func NewGateBroadcastBinaryArgs() *GateBroadcastBinaryArgs {
  return &GateBroadcastBinaryArgs{}
}


func (p *GateBroadcastBinaryArgs) GetGroup() string {
  return p.Group
}

func (p *GateBroadcastBinaryArgs) GetExclude() []string {
  return p.Exclude
}

func (p *GateBroadcastBinaryArgs) GetMessage() []byte {
  return p.Message
}
func (p *GateBroadcastBinaryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GateBroadcastBinaryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Group = v
}
  return nil
}

func (p *GateBroadcastBinaryArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Exclude =  tSet
  for i := 0; i < size; i ++ {
var _elem14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.Exclude = append(p.Exclude, _elem14)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GateBroadcastBinaryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *GateBroadcastBinaryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcast_binary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GateBroadcastBinaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group: ", p), err) }
  if err := oprot.WriteString(string(p.Group)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group: ", p), err) }
  return err
}

func (p *GateBroadcastBinaryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exclude", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exclude: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Exclude)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Exclude); i++ {
    for j := i+1; j<len(p.Exclude); j++ {
      if reflect.DeepEqual(p.Exclude[i],p.Exclude[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Exclude[i]))
      }
    }
  }
  for _, v := range p.Exclude {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exclude: ", p), err) }
  return err
}

func (p *GateBroadcastBinaryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
  if err := oprot.WriteBinary(p.Message); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  return err
}

func (p *GateBroadcastBinaryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GateBroadcastBinaryArgs(%+v)", *p)
}

// Attributes:
//  - Group
//  - Exclude
//  - Message
type GateBroadcastTextArgs struct {
  Group string `thrift:"group,1" db:"group" json:"group"`
  Exclude []string `thrift:"exclude,2" db:"exclude" json:"exclude"`
  Message string `thrift:"message,3" db:"message" json:"message"`
}

func NewGateBroadcastTextArgs() *GateBroadcastTextArgs {
  return &GateBroadcastTextArgs{}
}


func (p *GateBroadcastTextArgs) GetGroup() string {
  return p.Group
}

func (p *GateBroadcastTextArgs) GetExclude() []string {
  return p.Exclude
}

func (p *GateBroadcastTextArgs) GetMessage() string {
  return p.Message
}
func (p *GateBroadcastTextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GateBroadcastTextArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Group = v
}
  return nil
}

func (p *GateBroadcastTextArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Exclude =  tSet
  for i := 0; i < size; i ++ {
var _elem15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.Exclude = append(p.Exclude, _elem15)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GateBroadcastTextArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *GateBroadcastTextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcast_text_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GateBroadcastTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group: ", p), err) }
  if err := oprot.WriteString(string(p.Group)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group: ", p), err) }
  return err
}

func (p *GateBroadcastTextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exclude", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exclude: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Exclude)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Exclude); i++ {
    for j := i+1; j<len(p.Exclude); j++ {
      if reflect.DeepEqual(p.Exclude[i],p.Exclude[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Exclude[i]))
      }
    }
  }
  for _, v := range p.Exclude {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exclude: ", p), err) }
  return err
}

func (p *GateBroadcastTextArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  return err
}

func (p *GateBroadcastTextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GateBroadcastTextArgs(%+v)", *p)
}


type User interface {
  // Parameters:
  //  - Address
  //  - ConnID
  //  - Params
  Login(ctx context.Context, address string, conn_id string, params map[string]string) (err error)
  // Parameters:
  //  - Address
  //  - ConnID
  //  - Context
  Ping(ctx context.Context, address string, conn_id string, context map[string]string) (err error)
  // Parameters:
  //  - Address
  //  - ConnID
  //  - Context
  Disconnect(ctx context.Context, address string, conn_id string, context map[string]string) (err error)
  // Parameters:
  //  - Address
  //  - ConnID
  //  - Context
  //  - Message
  RecvBinary(ctx context.Context, address string, conn_id string, context map[string]string, message []byte) (err error)
  // Parameters:
  //  - Address
  //  - ConnID
  //  - Context
  //  - Message
  RecvText(ctx context.Context, address string, conn_id string, context map[string]string, message string) (err error)
}

type UserClient struct {
  c thrift.TClient
}

func NewUserClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserClient {
  return &UserClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserClient {
  return &UserClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserClient(c thrift.TClient) *UserClient {
  return &UserClient{
    c: c,
  }
}

func (p *UserClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Address
//  - ConnID
//  - Params
func (p *UserClient) Login(ctx context.Context, address string, conn_id string, params map[string]string) (err error) {
  var _args55 UserLoginArgs
  _args55.Address = address
  _args55.ConnID = conn_id
  _args55.Params = params
  if err := p.Client_().Call(ctx, "login", &_args55, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Address
//  - ConnID
//  - Context
func (p *UserClient) Ping(ctx context.Context, address string, conn_id string, context map[string]string) (err error) {
  var _args56 UserPingArgs
  _args56.Address = address
  _args56.ConnID = conn_id
  _args56.Context = context
  if err := p.Client_().Call(ctx, "ping", &_args56, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Address
//  - ConnID
//  - Context
func (p *UserClient) Disconnect(ctx context.Context, address string, conn_id string, context map[string]string) (err error) {
  var _args57 UserDisconnectArgs
  _args57.Address = address
  _args57.ConnID = conn_id
  _args57.Context = context
  if err := p.Client_().Call(ctx, "disconnect", &_args57, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Address
//  - ConnID
//  - Context
//  - Message
func (p *UserClient) RecvBinary(ctx context.Context, address string, conn_id string, context map[string]string, message []byte) (err error) {
  var _args58 UserRecvBinaryArgs
  _args58.Address = address
  _args58.ConnID = conn_id
  _args58.Context = context
  _args58.Message = message
  if err := p.Client_().Call(ctx, "recv_binary", &_args58, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Address
//  - ConnID
//  - Context
//  - Message
func (p *UserClient) RecvText(ctx context.Context, address string, conn_id string, context map[string]string, message string) (err error) {
  var _args59 UserRecvTextArgs
  _args59.Address = address
  _args59.ConnID = conn_id
  _args59.Context = context
  _args59.Message = message
  if err := p.Client_().Call(ctx, "recv_text", &_args59, nil); err != nil {
    return err
  }
  return nil
}

type UserProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler User
}

func (p *UserProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserProcessor(handler User) *UserProcessor {

  self60 := &UserProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self60.processorMap["login"] = &userProcessorLogin{handler:handler}
  self60.processorMap["ping"] = &userProcessorPing{handler:handler}
  self60.processorMap["disconnect"] = &userProcessorDisconnect{handler:handler}
  self60.processorMap["recv_binary"] = &userProcessorRecvBinary{handler:handler}
  self60.processorMap["recv_text"] = &userProcessorRecvText{handler:handler}
return self60
}

func (p *UserProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x61 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x61.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x61

}

type userProcessorLogin struct {
  handler User
}

func (p *userProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.Login(ctx, args.Address, args.ConnID, args.Params); err2 != nil {
    return true, err2
  }
  return true, nil
}

type userProcessorPing struct {
  handler User
}

func (p *userProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.Ping(ctx, args.Address, args.ConnID, args.Context); err2 != nil {
    return true, err2
  }
  return true, nil
}

type userProcessorDisconnect struct {
  handler User
}

func (p *userProcessorDisconnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserDisconnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.Disconnect(ctx, args.Address, args.ConnID, args.Context); err2 != nil {
    return true, err2
  }
  return true, nil
}

type userProcessorRecvBinary struct {
  handler User
}

func (p *userProcessorRecvBinary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserRecvBinaryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.RecvBinary(ctx, args.Address, args.ConnID, args.Context, args.Message); err2 != nil {
    return true, err2
  }
  return true, nil
}

type userProcessorRecvText struct {
  handler User
}

func (p *userProcessorRecvText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserRecvTextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.RecvText(ctx, args.Address, args.ConnID, args.Context, args.Message); err2 != nil {
    return true, err2
  }
  return true, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Address
//  - ConnID
//  - Params
type UserLoginArgs struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  ConnID string `thrift:"conn_id,2" db:"conn_id" json:"conn_id"`
  Params map[string]string `thrift:"params,3" db:"params" json:"params"`
}

func NewUserLoginArgs() *UserLoginArgs {
  return &UserLoginArgs{}
}


func (p *UserLoginArgs) GetAddress() string {
  return p.Address
}

func (p *UserLoginArgs) GetConnID() string {
  return p.ConnID
}

func (p *UserLoginArgs) GetParams() map[string]string {
  return p.Params
}
func (p *UserLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *UserLoginArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *UserLoginArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Params =  tMap
  for i := 0; i < size; i ++ {
var _key62 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key62 = v
}
var _val63 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val63 = v
}
    p.Params[_key62] = _val63
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *UserLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:conn_id: ", p), err) }
  return err
}

func (p *UserLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:params: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Params)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Params {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:params: ", p), err) }
  return err
}

func (p *UserLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserLoginArgs(%+v)", *p)
}

// Attributes:
//  - Address
//  - ConnID
//  - Context
type UserPingArgs struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  ConnID string `thrift:"conn_id,2" db:"conn_id" json:"conn_id"`
  Context map[string]string `thrift:"context,3" db:"context" json:"context"`
}

func NewUserPingArgs() *UserPingArgs {
  return &UserPingArgs{}
}


func (p *UserPingArgs) GetAddress() string {
  return p.Address
}

func (p *UserPingArgs) GetConnID() string {
  return p.ConnID
}

func (p *UserPingArgs) GetContext() map[string]string {
  return p.Context
}
func (p *UserPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserPingArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *UserPingArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *UserPingArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key64 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key64 = v
}
var _val65 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val65 = v
}
    p.Context[_key64] = _val65
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserPingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *UserPingArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:conn_id: ", p), err) }
  return err
}

func (p *UserPingArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:context: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Context {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:context: ", p), err) }
  return err
}

func (p *UserPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserPingArgs(%+v)", *p)
}

// Attributes:
//  - Address
//  - ConnID
//  - Context
type UserDisconnectArgs struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  ConnID string `thrift:"conn_id,2" db:"conn_id" json:"conn_id"`
  Context map[string]string `thrift:"context,3" db:"context" json:"context"`
}

func NewUserDisconnectArgs() *UserDisconnectArgs {
  return &UserDisconnectArgs{}
}


func (p *UserDisconnectArgs) GetAddress() string {
  return p.Address
}

func (p *UserDisconnectArgs) GetConnID() string {
  return p.ConnID
}

func (p *UserDisconnectArgs) GetContext() map[string]string {
  return p.Context
}
func (p *UserDisconnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserDisconnectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *UserDisconnectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *UserDisconnectArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key66 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key66 = v
}
var _val67 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val67 = v
}
    p.Context[_key66] = _val67
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserDisconnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserDisconnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *UserDisconnectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:conn_id: ", p), err) }
  return err
}

func (p *UserDisconnectArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:context: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Context {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:context: ", p), err) }
  return err
}

func (p *UserDisconnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserDisconnectArgs(%+v)", *p)
}

// Attributes:
//  - Address
//  - ConnID
//  - Context
//  - Message
type UserRecvBinaryArgs struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  ConnID string `thrift:"conn_id,2" db:"conn_id" json:"conn_id"`
  Context map[string]string `thrift:"context,3" db:"context" json:"context"`
  Message []byte `thrift:"message,4" db:"message" json:"message"`
}

func NewUserRecvBinaryArgs() *UserRecvBinaryArgs {
  return &UserRecvBinaryArgs{}
}


func (p *UserRecvBinaryArgs) GetAddress() string {
  return p.Address
}

func (p *UserRecvBinaryArgs) GetConnID() string {
  return p.ConnID
}

func (p *UserRecvBinaryArgs) GetContext() map[string]string {
  return p.Context
}

func (p *UserRecvBinaryArgs) GetMessage() []byte {
  return p.Message
}
func (p *UserRecvBinaryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserRecvBinaryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *UserRecvBinaryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *UserRecvBinaryArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key68 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key68 = v
}
var _val69 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val69 = v
}
    p.Context[_key68] = _val69
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserRecvBinaryArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UserRecvBinaryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("recv_binary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserRecvBinaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *UserRecvBinaryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:conn_id: ", p), err) }
  return err
}

func (p *UserRecvBinaryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:context: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Context {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:context: ", p), err) }
  return err
}

func (p *UserRecvBinaryArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err) }
  if err := oprot.WriteBinary(p.Message); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err) }
  return err
}

func (p *UserRecvBinaryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserRecvBinaryArgs(%+v)", *p)
}

// Attributes:
//  - Address
//  - ConnID
//  - Context
//  - Message
type UserRecvTextArgs struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  ConnID string `thrift:"conn_id,2" db:"conn_id" json:"conn_id"`
  Context map[string]string `thrift:"context,3" db:"context" json:"context"`
  Message string `thrift:"message,4" db:"message" json:"message"`
}

func NewUserRecvTextArgs() *UserRecvTextArgs {
  return &UserRecvTextArgs{}
}


func (p *UserRecvTextArgs) GetAddress() string {
  return p.Address
}

func (p *UserRecvTextArgs) GetConnID() string {
  return p.ConnID
}

func (p *UserRecvTextArgs) GetContext() map[string]string {
  return p.Context
}

func (p *UserRecvTextArgs) GetMessage() string {
  return p.Message
}
func (p *UserRecvTextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserRecvTextArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *UserRecvTextArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConnID = v
}
  return nil
}

func (p *UserRecvTextArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key70 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key70 = v
}
var _val71 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val71 = v
}
    p.Context[_key70] = _val71
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserRecvTextArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UserRecvTextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("recv_text_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserRecvTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *UserRecvTextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conn_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:conn_id: ", p), err) }
  if err := oprot.WriteString(string(p.ConnID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conn_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:conn_id: ", p), err) }
  return err
}

func (p *UserRecvTextArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:context: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Context {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:context: ", p), err) }
  return err
}

func (p *UserRecvTextArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err) }
  return err
}

func (p *UserRecvTextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserRecvTextArgs(%+v)", *p)
}


